{"paragraphs":[{"text":"%md\n### Apache Spark\n#### Distributed computing engine\nNative language scala (strongly typed JVM based functional/OO language)\nPossibility to use whole java ecosystem\nMarklogic java api available. XML literals like in xquery\nREPL\nPython, R\nMachine learning, SparkML, Tensorflow\nResiliency (job fail recovery on the executors)\nMultiple deployment options (one-node, stand-alone, YARN, Kubernetes)\n\n#### APIs: RDD, DataFrame, DataSet \nRDD: jvm object based API\nDataFrame: highly optimized sql-like API (Tungsten as serialization engine, Catalyst SQL optimizer). SparkSQL. Schema inference from JSON.\nDataSet: Typed API similar to DataFrame\n\n#### Integration with Marklogic\nOpticAPI: example here\nEntityServices\nSemantics\n\nAdvantage over XQuery: strongly typed language. The exceptions are caught upon compilation not in the run-time. The canonical object model is known.\n\n##### Possibility to load a subset of the data into highly performant columnar format Parquet (or ORC) for later analytics, machine learning. Full control on parallelization.\n","user":"anonymous","dateUpdated":"2018-11-16T16:26:17+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Apache Spark</h3>\n<h4>Distributed computing engine</h4>\n<p>Native language scala (strongly typed JVM based functional/OO language)<br/>Possibility to use whole java ecosystem<br/>Marklogic java api available. XML literals like in xquery<br/>REPL<br/>Python, R<br/>Machine learning, SparkML, Tensorflow<br/>Resiliency (job fail recovery on the executors)<br/>Multiple deployment options (one-node, stand-alone, YARN, Kubernetes)</p>\n<h4>APIs: RDD, DataFrame, DataSet</h4>\n<p>RDD: jvm object based API<br/>DataFrame: highly optimized sql-like API (Tungsten as serialization engine, Catalyst SQL optimizer). SparkSQL. Schema inference from JSON.<br/>DataSet: Typed API similar to DataFrame</p>\n<h4>Integration with Marklogic</h4>\n<p>OpticAPI: example here<br/>EntityServices<br/>Semantics</p>\n<p>Advantage over XQuery: strongly typed language. The exceptions are caught upon compilation not in the run-time. The canonical object model is known.</p>\n<h5>Possibility to load a subset of the data into highly performant columnar format Parquet (or ORC) for later analytics, machine learning. Full control on parallelization.</h5>\n</div>"}]},"apps":[],"jobName":"paragraph_1542316130224_-641633255","id":"20181115-220850_511940927","dateCreated":"2018-11-15T22:08:50+0100","dateStarted":"2018-11-16T16:26:17+0100","dateFinished":"2018-11-16T16:26:17+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:15276"},{"text":"%md\n### Apache Zeppelin\n\nWeb-based notebook that enables data-driven, interactive data analytics and collaborative documents with SQL, Scala and more.\nAlternative to BI tools:\n#### advantages: \n* programistic interface in Scala(Repl), Python, R\n* many interpreters\n* no need to deploy anything\n* build in visualization engine\n* possibility to attach any Javascript library for advanced visualization (d3, highcharts) [example](http://localhost:8080/#/notebook/2DUNHKYMN) [example](https://randerzander.github.io/?post=data-apps.md#?post=data-apps.md)\n* dynamic forms with AngularJS [example](http://localhost:8080/#/notebook/2DW1WG182)\n* embeddable views (IFrames with forms)\n* dynamic dependencies (Maven, Artifactory)\n* LDAP integration (SSO)\n* paragraph based authorisation (edit, view, execute)\n* Git integration\n#### disadvantages\n* not mature enough for heavy production use. Mainly focused for advanced analysis (prototyping) in the scale and machine learning","user":"anonymous","dateUpdated":"2018-11-16T14:24:48+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true,"completionKey":"TAB","completionSupport":false},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Apache Zeppelin</h3>\n<p>Web-based notebook that enables data-driven, interactive data analytics and collaborative documents with SQL, Scala and more.<br/>Alternative to BI tools:</p>\n<h4>advantages:</h4>\n<ul>\n  <li>programistic interface in Scala(Repl), Python, R</li>\n  <li>many interpreters</li>\n  <li>no need to deploy anything</li>\n  <li>build in visualization engine</li>\n  <li>possibility to attach any Javascript library for advanced visualization (d3, highcharts) <a href=\"http://localhost:8080/#/notebook/2DUNHKYMN\">example</a> <a href=\"https://randerzander.github.io/?post=data-apps.md#?post=data-apps.md\">example</a></li>\n  <li>dynamic forms with AngularJS <a href=\"http://localhost:8080/#/notebook/2DW1WG182\">example</a></li>\n  <li>embeddable views (IFrames with forms)</li>\n  <li>dynamic dependencies (Maven, Artifactory)</li>\n  <li>LDAP integration (SSO)</li>\n  <li>paragraph based authorisation (edit, view, execute)</li>\n  <li>\n  <p>Git integration</p>\n  <h4>disadvantages</h4></li>\n  <li>not mature enough for heavy production use. Mainly focused for advanced analysis (prototyping) in the scale and machine learning</li>\n</ul>\n</div>"}]},"apps":[],"jobName":"paragraph_1542322347216_-1629829398","id":"20181115-235227_1154381425","dateCreated":"2018-11-15T23:52:27+0100","dateStarted":"2018-11-16T14:24:48+0100","dateFinished":"2018-11-16T14:24:48+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15277"},{"title":"Example of build in graph capabilities","text":"%spark\nprint(s\"\"\"\n%network {\n    \"nodes\": [{\"id\": 1, \"label\": \"User\", \"data\": {\"fullName\":\"Andrea Santurbano\"}},{\"id\": 2, \"label\": \"User\", \"data\": {\"fullName\":\"Lee Moon Soo\"}},{\"id\": 3, \"label\": \"Project\", \"data\": {\"name\":\"Zeppelin\"}}],\n    \"edges\": [{\"source\": 2, \"target\": 1, \"id\" : 1, \"label\": \"HELPS\"},{\"source\": 2, \"target\": 3, \"id\" : 2, \"label\": \"CREATE\"},{\"source\": 1, \"target\": 3, \"id\" : 3, \"label\": \"CONTRIBUTE_TO\", \"data\": {\"oldPR\": \"https://github.com/apache/zeppelin/pull/1582\"}}],\n    \"labels\": {\"User\": \"#8BC34A\", \"Project\": \"#3071A9\"},\n    \"directed\": true,\n    \"types\": [\"HELPS\", \"CREATE\", \"CONTRIBUTE_TO\"]\n}\n\"\"\")","user":"anonymous","dateUpdated":"2018-11-16T16:32:31+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"1":{"graph":{"mode":"network","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"id":"string","label":"string","fullName":"string","name":"string","oldPR":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false}},"commonSetting":{}},"helium":{}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1542318375327_1511640276","id":"20181115-224615_186811336","dateCreated":"2018-11-15T22:46:15+0100","dateStarted":"2018-11-16T16:32:31+0100","dateFinished":"2018-11-16T16:32:31+0100","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:15278"},{"title":"Loading needed dependencies","text":"%dep\nz.reset()\nz.addRepo(\"jcenter\").url(\"http://jcenter.bintray.com\")\nz.load(\"com.marklogic:marklogic-client-api:4.1.1\")","user":"anonymous","dateUpdated":"2018-11-15T21:29:58+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res0: org.apache.zeppelin.dep.Dependency = org.apache.zeppelin.dep.Dependency@4bacff30\n"}]},"apps":[],"jobName":"paragraph_1539547804120_837456878","id":"20180527-141854_444075931","dateCreated":"2018-10-14T22:10:04+0200","dateStarted":"2018-10-14T22:29:58+0200","dateFinished":"2018-10-14T22:30:05+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15279"},{"text":"import com.marklogic.client.DatabaseClient;\nimport com.marklogic.client.DatabaseClientFactory;\nimport com.marklogic.client.io._\nimport com.marklogic.client.expression.PlanBuilder;\nimport com.marklogic.client.expression.PlanBuilder.ModifyPlan;\nimport com.marklogic.client.row.RowManager;\n","user":"anonymous","dateUpdated":"2018-11-13T22:43:05+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import com.marklogic.client.DatabaseClient\nimport com.marklogic.client.DatabaseClientFactory\nimport com.marklogic.client.io._\nimport com.marklogic.client.expression.PlanBuilder\nimport com.marklogic.client.expression.PlanBuilder.ModifyPlan\nimport com.marklogic.client.row.RowManager\n"}]},"apps":[],"jobName":"paragraph_1539547804123_57787954","id":"20180527-142145_113264003","dateCreated":"2018-10-14T22:10:04+0200","dateStarted":"2018-11-13T22:43:05+0100","dateFinished":"2018-11-13T22:43:06+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15280"},{"title":"Connecting to the marklogic server","text":"val db = DatabaseClientFactory.newClient(\n         \"localhost\", 8011, \n         new DatabaseClientFactory.DigestAuthContext(\"admin\", \"admin\")\n      );","user":"anonymous","dateUpdated":"2018-11-13T23:38:38+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"db: com.marklogic.client.DatabaseClient = com.marklogic.client.impl.DatabaseClientImpl@d03e761\n"}]},"apps":[],"jobName":"paragraph_1539547804124_-1333201180","id":"20180527-143717_4926685","dateCreated":"2018-10-14T22:10:04+0200","dateStarted":"2018-11-13T22:43:09+0100","dateFinished":"2018-11-13T22:43:09+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15281"},{"title":"Function for xquery evaluation (all server side functions available)","text":"def eval(xquery:String, client:DatabaseClient):List[String] = {\n    client.newServerEval().xquery(xquery).eval().iterator().asScala.toList.map(e => e.getAs(classOf[String]))\n}","user":"anonymous","dateUpdated":"2018-11-15T21:39:34+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"eval: (xquery: String, client: com.marklogic.client.DatabaseClient)List[String]\n"}]},"apps":[],"jobName":"paragraph_1542148745673_-1409765456","id":"20181113-233905_1362461413","dateCreated":"2018-11-13T23:39:05+0100","dateStarted":"2018-11-15T21:34:39+0100","dateFinished":"2018-11-15T21:34:40+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15282"},{"title":"Retrieving the uris of the documents in the scope","text":"val uris = eval(\"\"\"\n\ncts:uris((),(), cts:collection-query(\"customer\"))\n\n\"\"\", db)","user":"anonymous","dateUpdated":"2018-11-16T16:34:49+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"uris: List[String] = List(/CUSTOMER/038115e7-c57e-447d-8722-ff4e820e6957.xml, /CUSTOMER/093e5354-8d38-4f24-850d-7bc79d3ca460.xml, /CUSTOMER/12fc9b24-024b-4002-880e-fbb308c43fdc.xml, /CUSTOMER/1bebfa5c-1bc7-4adb-9f8a-0921ad2e4a5c.xml, /CUSTOMER/21108d2f-0b16-4cbb-9e7c-91cd26fc81b0.xml, /CUSTOMER/27502a1c-90ac-4bb5-9565-30fdfcfd04bb.xml, /CUSTOMER/291fbb7f-5dee-4729-b8c0-c2885e96322d.xml, /CUSTOMER/2a00128e-4860-47b4-b232-700655da3865.xml, /CUSTOMER/2b07de5f-3a94-4b22-875e-6c3f64463d67.xml, /CUSTOMER/2e10ad09-450c-447e-9458-157b729267ad.xml, /CUSTOMER/31a01723-18e3-4a3f-8824-7358ceb0eaab.xml, /CUSTOMER/4578d0cc-b6b4-41ff-ad08-8d96fb53cbeb.xml, /CUSTOMER/480f81de-ef1b-48ce-9887-4166d41362b5.xml, /CUSTOMER/4e167816-943d-421a-8a48-697d8f552250.xml, /CUSTOMER/586c178c-c37e-4414-87a2-a56282064..."}]},"apps":[],"jobName":"paragraph_1542314097412_905042159","id":"20181115-213457_856358319","dateCreated":"2018-11-15T21:34:57+0100","dateStarted":"2018-11-16T16:34:49+0100","dateFinished":"2018-11-16T16:34:50+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15283"},{"title":"Loading the Optic View (job will be splitted over spark executors). Function returns Spark DataFrame","text":"import scala.collection.JavaConverters._\ndef loadView(schema:String, view:String, aliass:String, uris:Array[String]) = {\n    val urisRDD = sc.parallelize(uris)\n    val jsonsRDD = urisRDD.mapPartitions(part => {\n        //for each partition creating a new client and needed objects (they are not serializable, so we cannot initialize in the spark driver). This will be executed across all nodes in the cluster\n        val db = DatabaseClientFactory.newClient(\"localhost\", 8011, new DatabaseClientFactory.DigestAuthContext(\"admin\", \"admin\"))\n        val rowMgr = db.newRowManager()\n        val p = rowMgr.newPlanBuilder\n        rowMgr.setDatatypeStyle(RowManager.RowSetPart.HEADER)\n        val partUris = part.toArray\n        val plan = p.fromView(schema, view, aliass).where(p.cts.documentQuery(p.xs.stringSeq(partUris:_*)))\n        val res = rowMgr.resultRows(plan, new StringHandle().withMimetype(\"json\")).asScala.map(_.get).toList\n        res.iterator\n    })\n    val rowsDS = spark.createDataset(jsonsRDD)\n    spark.read.json(rowsDS)\n}","user":"anonymous","dateUpdated":"2018-11-16T16:39:18+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import scala.collection.JavaConverters._\nloadView: (schema: String, view: String, aliass: String, uris: Array[String])org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1542314534005_85697990","id":"20181115-214214_1449644299","dateCreated":"2018-11-15T21:42:14+0100","dateStarted":"2018-11-16T16:39:18+0100","dateFinished":"2018-11-16T16:39:19+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15284"},{"text":"val customersDF = loadView(\"Customer\", \"CUSTOMER\", \"customer\", uris.toArray)\ncustomersDF.show","user":"anonymous","dateUpdated":"2018-11-16T16:42:20+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"customersDF: org.apache.spark.sql.DataFrame = [customer.first_name: string, customer.id: string ... 1 more field]\n+-------------------+-----------+------------------+\n|customer.first_name|customer.id|customer.last_name|\n+-------------------+-----------+------------------+\n|             Andrew|         38|          Heiniger|\n|              Laura|          0|             Steel|\n|              Janet|         20|         Schneider|\n|              James|          9|         Schneider|\n|               Mary|         39|            Karsen|\n|             George|         12|               Ott|\n|            Michael|          3|            Clancy|\n|               Bill|         30|            Sommer|\n|              Janet|         47|            Fuller|\n|              James|         24|            Sommer|\n|             Robert|         42|               Ott|\n|              Laura|          5|            Miller|\n|             Robert|         48|             White|\n|            Susanne|         40|            Miller|\n|               Bill|         41|              King|\n|               Bill|         14|            Karsen|\n|            Susanne|          1|              King|\n|              Laura|         13|            Ringer|\n|               Anne|          2|            Miller|\n|             George|         49|            Fuller|\n+-------------------+-----------+------------------+\nonly showing top 20 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.76:4040/jobs/job?id=175","http://192.168.1.76:4040/jobs/job?id=176","http://192.168.1.76:4040/jobs/job?id=177"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1542315928899_-318851876","id":"20181115-220528_497986044","dateCreated":"2018-11-15T22:05:28+0100","dateStarted":"2018-11-16T16:42:20+0100","dateFinished":"2018-11-16T16:42:21+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15285"},{"title":"Saving the dataframe into native 'parquet' file (distributed in hdfs of s3) for later analysis<br/> the columnar format with support of the nested structures","text":"customersDF.write.parquet(\"customer.parquet\")","user":"anonymous","dateUpdated":"2018-11-15T23:20:41+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.76:4040/jobs/job?id=74"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1539547804125_1849155833","id":"20180527-170210_722047150","dateCreated":"2018-10-14T22:10:04+0200","dateStarted":"2018-11-15T23:20:41+0100","dateFinished":"2018-11-15T23:20:41+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15286"},{"title":"Loading the parquet file","text":"val parquetFileDF = spark.read.parquet(\"customer.parquet\")\nparquetFileDF.printSchema","user":"anonymous","dateUpdated":"2018-11-16T16:47:16+0100","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"parquetFileDF: org.apache.spark.sql.DataFrame = [customer.first_name: string, customer.id: string ... 1 more field]\nroot\n |-- customer.first_name: string (nullable = true)\n |-- customer.id: string (nullable = true)\n |-- customer.last_name: string (nullable = true)\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.76:4040/jobs/job?id=178"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1539547804125_712512596","id":"20180527-172340_1218544216","dateCreated":"2018-10-14T22:10:04+0200","dateStarted":"2018-11-16T16:47:16+0100","dateFinished":"2018-11-16T16:47:17+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15287"},{"title":"Registering the data for Sql","text":"parquetFileDF.registerTempTable(\"customers\")","user":"anonymous","dateUpdated":"2018-11-15T23:17:19+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\n"}]},"apps":[],"jobName":"paragraph_1539555592566_1425698122","id":"20181015-001952_484107335","dateCreated":"2018-10-15T00:19:52+0200","dateStarted":"2018-10-15T00:20:51+0200","dateFinished":"2018-10-15T00:20:52+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15288"},{"text":"%sql\nselect * from customers where `Customer.CUSTOMER.first_name` like \"%${name=Sylvia}%\"","user":"anonymous","dateUpdated":"2018-11-16T17:09:57+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"table","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{"columns":[{"name":"Customer.CUSTOMER.id","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Customer.CUSTOMER.first_name","visible":true,"width":"*","sort":{"priority":0,"direction":"desc"},"filters":[{}],"pinned":""},{"name":"Customer.CUSTOMER.last_name","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Customer.CUSTOMER.first_name":"string","Customer.CUSTOMER.id":"string","Customer.CUSTOMER.last_name":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"Customer.CUSTOMER.first_name","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"Customer.CUSTOMER.id","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/sql","editorHide":true,"tableHide":false},"settings":{"params":{"name":"Syl"},"forms":{"name":{"type":"TextBox","name":"name","defaultValue":"Sylvia","hidden":false,"$$hashKey":"object:15462"}}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"Customer.CUSTOMER.first_name\tCustomer.CUSTOMER.id\tCustomer.CUSTOMER.last_name\nSylvia\t4\tRinger\nSylvia\t18\tFuller\nSylvia\t25\tSteel\nSylvia\t44\tOtt\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.76:4040/jobs/job?id=185","http://192.168.1.76:4040/jobs/job?id=186","http://192.168.1.76:4040/jobs/job?id=187"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1539555656936_-517082185","id":"20181015-002056_701164805","dateCreated":"2018-10-15T00:20:56+0200","dateStarted":"2018-11-16T17:09:57+0100","dateFinished":"2018-11-16T17:09:57+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15289"},{"title":"Strongly typed dataset. Here example with default encoder. Custom encoder can infer the data types. DataSet = DataFrame + Object (see 'buy' method called)","text":"case class Customer(id:String, firstName:String, lastName:String){\n    def buy():String = s\"$firstName buyed!!\"\n}\n\nval jsonArray = Array(\"\"\"{\"id\":\"2\", \"firstName\": \"Pawel\", \"lastName\": \"Katarzynski\"}\"\"\", \"\"\"{\"id\":\"1\", \"firstName\": \"Sony\", \"lastName\": \"Vechoor\"}\"\"\")\nval jsonRdd = sc.parallelize(jsonArray)\nval dataSet = spark.read.json(jsonRdd).as[Customer]\ndataSet.where($\"id\" === \"2\").show\ndataSet.map(_.buy).show\n\n\n//saving directly to the csv.\ndataSet.coalesce(1).write.csv(\"/home/pawel/csvFile2.csv\")","user":"anonymous","dateUpdated":"2018-11-16T17:11:02+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"defined class Customer\njsonArray: Array[String] = Array({\"id\":\"2\", \"firstName\": \"Pawel\", \"lastName\": \"Katarzynski\"}, {\"id\":\"1\", \"firstName\": \"Sony\", \"lastName\": \"Vechoor\"})\njsonRdd: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[561] at parallelize at <console>:109\nwarning: there was one deprecation warning; re-run with -deprecation for details\ndataSet: org.apache.spark.sql.Dataset[Customer] = [firstName: string, id: string ... 1 more field]\n+---------+---+-----------+\n|firstName| id|   lastName|\n+---------+---+-----------+\n|    Pawel|  2|Katarzynski|\n+---------+---+-----------+\n\n+-------------+\n|        value|\n+-------------+\n|Pawel buyed!!|\n| Sony buyed!!|\n+-------------+\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://192.168.1.76:4040/jobs/job?id=188","http://192.168.1.76:4040/jobs/job?id=189","http://192.168.1.76:4040/jobs/job?id=190","http://192.168.1.76:4040/jobs/job?id=191","http://192.168.1.76:4040/jobs/job?id=192","http://192.168.1.76:4040/jobs/job?id=193","http://192.168.1.76:4040/jobs/job?id=194","http://192.168.1.76:4040/jobs/job?id=195"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1542149508172_-998165182","id":"20181113-235148_509952119","dateCreated":"2018-11-13T23:51:48+0100","dateStarted":"2018-11-16T17:11:02+0100","dateFinished":"2018-11-16T17:11:04+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15290"},{"text":"%spark\nprintln(\"%table\\nx\\ty\")\n(0 to 340).map(i=>i.toDouble * 0.01).map(x=>(x, Math.sin(x))).foreach{case (x,y) => println(x + \"\\t\" + y)}\n\n","user":"anonymous","dateUpdated":"2018-11-21T22:49:35+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{"0":{"graph":{"mode":"stackedAreaChart","height":300,"optionOpen":false,"setting":{"table":{"tableGridState":{},"tableColumnTypeState":{"names":{"x":"string","y":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":false,"showPagination":false,"showAggregationFooter":false},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":false},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","style":"stack"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"x","index":0,"aggr":"sum"}],"groups":[],"values":[{"name":"y","index":1,"aggr":"sum"}]},"helium":{}}},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala","editorHide":false,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TABLE","data":"x\ty\n0.0\t0.0\n0.01\t0.009999833334166664\n0.02\t0.01999866669333308\n0.03\t0.02999550020249566\n0.04\t0.03998933418663416\n0.05\t0.04997916927067833\n0.06\t0.059964006479444595\n0.07\t0.06994284733753277\n0.08\t0.0799146939691727\n0.09\t0.08987854919801104\n0.1\t0.09983341664682815\n0.11\t0.10977830083717481\n0.12\t0.11971220728891936\n0.13\t0.12963414261969486\n0.14\t0.1395431146442365\n0.15\t0.14943813247359922\n0.16\t0.15931820661424598\n0.17\t0.16918234906699603\n0.18\t0.17902957342582418\n0.19\t0.18885889497650057\n0.2\t0.19866933079506122\n0.21\t0.20845989984609956\n0.22\t0.21822962308086932\n0.23\t0.2279775235351884\n0.24\t0.23770262642713458\n0.25\t0.24740395925452294\n0.26\t0.2570805518921551\n0.27\t0.26673143668883115\n0.28\t0.27635564856411376\n0.29\t0.28595222510483553\n0.3\t0.29552020666133955\n0.31\t0.3050586364434435\n0.32\t0.31456656061611776\n0.33\t0.32404302839486837\n0.34\t0.3334870921408144\n0.35000000000000003\t0.3428978074554514\n0.36\t0.35227423327508994\n0.37\t0.361615431964962\n0.38\t0.3709204694129827\n0.39\t0.3801884151231614\n0.4\t0.3894183423086505\n0.41000000000000003\t0.39860932798442295\n0.42\t0.40776045305957015\n0.43\t0.41687080242921076\n0.44\t0.4259394650659996\n0.45\t0.43496553411123023\n0.46\t0.4439481069655198\n0.47000000000000003\t0.45288628537906833\n0.48\t0.4617791755414829\n0.49\t0.470625888171158\n0.5\t0.479425538604203\n0.51\t0.4881772468829075\n0.52\t0.49688013784373675\n0.53\t0.5055333412048469\n0.54\t0.5141359916531132\n0.55\t0.5226872289306592\n0.56\t0.5311861979208834\n0.5700000000000001\t0.5396320487339693\n0.58\t0.5480239367918736\n0.59\t0.5563610229127838\n0.6\t0.5646424733950354\n0.61\t0.5728674601004813\n0.62\t0.5810351605373051\n0.63\t0.5891447579422695\n0.64\t0.5971954413623921\n0.65\t0.6051864057360395\n0.66\t0.6131168519734338\n0.67\t0.6209859870365597\n0.68\t0.6287930240184686\n0.6900000000000001\t0.636537182221968\n0.7000000000000001\t0.6442176872376911\n0.71\t0.6518337710215366\n0.72\t0.6593846719714731\n0.73\t0.6668696350036979\n0.74\t0.674287911628145\n0.75\t0.6816387600233341\n0.76\t0.6889214451105513\n0.77\t0.6961352386273567\n0.78\t0.7032794192004101\n0.79\t0.7103532724176078\n0.8\t0.7173560908995228\n0.81\t0.7242871743701426\n0.8200000000000001\t0.7311458297268959\n0.8300000000000001\t0.7379313711099628\n0.84\t0.7446431199708593\n0.85\t0.7512804051402927\n0.86\t0.757842562895277\n0.87\t0.7643289370255051\n0.88\t0.7707388788989693\n0.89\t0.7770717475268238\n0.9\t0.7833269096274834\n0.91\t0.7895037396899505\n0.92\t0.795601620036366\n0.93\t0.8016199408837772\n0.9400000000000001\t0.8075581004051143\n0.9500000000000001\t0.8134155047893737\n0.96\t0.8191915683009983\n0.97\t0.8248857133384501\n0.98\t0.8304973704919705\n0.99\t0.8360259786005205\n1.0\t0.8414709848078965\n1.01\t0.8468318446180152\n1.02\t0.852108021949363\n1.03\t0.8572989891886034\n1.04\t0.8624042272433384\n1.05\t0.867423225594017\n1.06\t0.8723554823449863\n1.07\t0.8772005042746817\n1.08\t0.8819578068849475\n1.09\t0.8866269144494873\n1.1\t0.8912073600614354\n1.11\t0.8956986856800476\n1.12\t0.9001004421765051\n1.1300000000000001\t0.904412189378826\n1.1400000000000001\t0.9086334961158833\n1.1500000000000001\t0.9127639402605211\n1.16\t0.9168031087717669\n1.17\t0.9207505977361357\n1.18\t0.9246060124080203\n1.19\t0.9283689672491666\n1.2\t0.9320390859672263\n1.21\t0.9356160015533859\n1.22\t0.9390993563190676\n1.23\t0.9424888019316975\n1.24\t0.945783999449539\n1.25\t0.9489846193555862\n1.26\t0.9520903415905158\n1.27\t0.9551008555846923\n1.28\t0.9580158602892249\n1.29\t0.9608350642060727\n1.3\t0.963558185417193\n1.31\t0.966184951612734\n1.32\t0.9687151001182652\n1.33\t0.9711483779210446\n1.34\t0.9734845416953194\n1.35\t0.9757233578266591\n1.36\t0.9778646024353163\n1.37\t0.9799080613986142\n1.3800000000000001\t0.9818535303723598\n1.3900000000000001\t0.9837008148112766\n1.4000000000000001\t0.9854497299884603\n1.41\t0.9871001010138504\n1.42\t0.9886517628517197\n1.43\t0.9901045603371778\n1.44\t0.9914583481916864\n1.45\t0.9927129910375885\n1.46\t0.9938683634116449\n1.47\t0.9949243497775809\n1.48\t0.99588084453764\n1.49\t0.9967377520431434\n1.5\t0.9974949866040544\n1.51\t0.9981524724975481\n1.52\t0.998710143975583\n1.53\t0.999167945271476\n1.54\t0.9995258306054791\n1.55\t0.999783764189357\n1.56\t0.9999417202299663\n1.57\t0.9999996829318346\n1.58\t0.9999576464987401\n1.59\t0.9998156151342908\n1.6\t0.9995736030415051\n1.61\t0.9992316344213905\n1.62\t0.998789743470524\n1.6300000000000001\t0.9982479743776325\n1.6400000000000001\t0.9976063813191737\n1.6500000000000001\t0.9968650284539189\n1.6600000000000001\t0.9960239899165367\n1.67\t0.9950833498101802\n1.68\t0.994043202198076\n1.69\t0.9929036510941185\n1.7\t0.9916648104524686\n1.71\t0.990326804156158\n1.72\t0.9888897660047015\n1.73\t0.9873538397007164\n1.74\t0.9857191788355535\n1.75\t0.9839859468739369\n1.76\t0.9821543171376185\n1.77\t0.9802244727880455\n1.78\t0.9781966068080447\n1.79\t0.9760709219825242\n1.8\t0.9738476308781951\n1.81\t0.9715269558223153\n1.82\t0.9691091288804563\n1.83\t0.9665943918332975\n1.84\t0.9639829961524481\n1.85\t0.9612752029752999\n1.86\t0.9584712830789142\n1.87\t0.955571516852944\n1.8800000000000001\t0.9525761942715953\n1.8900000000000001\t0.9494856148646305\n1.9000000000000001\t0.9463000876874145\n1.9100000000000001\t0.9430199312900105\n1.92\t0.9396454736853249\n1.93\t0.9361770523163061\n1.94\t0.9326150140222005\n1.95\t0.9289597150038693\n1.96\t0.9252115207881683\n1.97\t0.9213708061913954\n1.98\t0.9174379552818098\n1.99\t0.9134133613412252\n2.0\t0.9092974268256817\n2.0100000000000002\t0.9050905633252009\n2.02\t0.9007931915226273\n2.0300000000000002\t0.8964057411515598\n2.04\t0.8919286509533796\n2.05\t0.8873623686333755\n2.06\t0.8827073508159741\n2.07\t0.8779640629990781\n2.08\t0.8731329795075164\n2.09\t0.8682145834456126\n2.1\t0.8632093666488737\n2.11\t0.8581178296348089\n2.12\t0.8529404815528762\n2.13\t0.8476778401335698\n2.14\t0.8423304316366457\n2.15\t0.8368987907984977\n2.16\t0.8313834607786831\n2.17\t0.8257849931056082\n2.18\t0.8201039476213741\n2.19\t0.814340892425796\n2.2\t0.8084964038195901\n2.21\t0.8025710662467472\n2.22\t0.7965654722360865\n2.23\t0.7904802223420048\n2.24\t0.7843159250844198\n2.25\t0.7780731968879212\n2.2600000000000002\t0.7717526620201257\n2.27\t0.7653549525292536\n2.2800000000000002\t0.7588807081809218\n2.29\t0.7523305763941708\n2.3000000000000003\t0.74570521217672\n2.31\t0.7390052780594708\n2.32\t0.7322314440302514\n2.33\t0.7253843874668195\n2.34\t0.7184647930691261\n2.35\t0.7114733527908443\n2.36\t0.7044107657701763\n2.37\t0.6972777382599378\n2.38\t0.6900749835569364\n2.39\t0.6828032219306397\n2.4\t0.675463180551151\n2.41\t0.6680555934164909\n2.42\t0.6605812012792007\n2.43\t0.6530407515722648\n2.44\t0.6454349983343708\n2.45\t0.6377647021345036\n2.46\t0.6300306299958922\n2.47\t0.6222335553193046\n2.48\t0.6143742578057118\n2.49\t0.6064535233783147\n2.5\t0.5984721441039564\n2.5100000000000002\t0.5904309181139127\n2.52\t0.5823306495240819\n2.5300000000000002\t0.5741721483545723\n2.54\t0.5659562304487028\n2.5500000000000003\t0.5576837173914166\n2.56\t0.5493554364271266\n2.57\t0.5409722203769886\n2.58\t0.5325349075556212\n2.59\t0.5240443416872761\n2.6\t0.5155013718214642\n2.61\t0.5069068522480534\n2.62\t0.49826164241183857\n2.63\t0.4895666068265995\n2.64\t0.48082261498864826\n2.65\t0.47203054128988264\n2.66\t0.4631912649303452\n2.67\t0.45430566983030646\n2.68\t0.44537464454187115\n2.69\t0.4363990821601263\n2.7\t0.4273798802338298\n2.71\t0.418317940675659\n2.72\t0.4092141696720173\n2.73\t0.4000694775924195\n2.74\t0.3908847788984522\n2.75\t0.38166099205233167\n2.7600000000000002\t0.3723990394250553\n2.77\t0.3630998472041683\n2.7800000000000002\t0.3537643453011427\n2.79\t0.34439346725839\n2.8000000000000003\t0.33498815015590466\n2.81\t0.32554933451756\n2.82\t0.3160779642170538\n2.83\t0.30657498638352293\n2.84\t0.2970413513068324\n2.85\t0.2874780123425444\n2.86\t0.2778859258165868\n2.87\t0.2682660509296179\n2.88\t0.25861934966111083\n2.89\t0.24894678667315256\n2.9\t0.23924932921398243\n2.91\t0.2295279470212642\n2.92\t0.21978361222511694\n2.93\t0.21001729925089915\n2.94\t0.20022998472177053\n2.95\t0.19042264736102704\n2.96\t0.18059626789423291\n2.97\t0.17075182895114532\n2.98\t0.16089031496745576\n2.99\t0.15101271208634384\n3.0\t0.1411200080598672\n3.0100000000000002\t0.1312131921501838\n3.02\t0.12129325503062975\n3.0300000000000002\t0.11136118868664958\n3.04\t0.10141798631660187\n3.0500000000000003\t0.09146464223243675\n3.06\t0.08150215176026912\n3.0700000000000003\t0.07153151114084326\n3.08\t0.06155371742991315\n3.09\t0.05156976839853464\n3.1\t0.04158066243329049\n3.11\t0.031587398436453896\n3.12\t0.02159097572609596\n3.13\t0.011592393936158275\n3.14\t0.0015926529164868282\n3.15\t-0.008407247367148618\n3.16\t-0.01840630693305381\n3.17\t-0.02840352588360379\n3.18\t-0.03839790450523538\n3.19\t-0.04838844336841415\n3.2\t-0.058374143427580086\n3.21\t-0.06835400612104778\n3.22\t-0.0783270334708653\n3.23\t-0.0882922281826076\n3.24\t-0.09824859374510868\n3.25\t-0.10819513453010837\n3.2600000000000002\t-0.11813085589181781\n3.27\t-0.12805476426637968\n3.2800000000000002\t-0.13796586727122728\n3.29\t-0.14786317380431852\n3.3000000000000003\t-0.15774569414324865\n3.31\t-0.16761244004421832\n3.3200000000000003\t-0.17746242484086058\n3.33\t-0.18729466354290317\n3.34\t-0.19710817293466984\n3.35\t-0.20690197167339977\n3.36\t-0.21667508038737962\n3.37\t-0.22642652177388314\n3.38\t-0.236155320696897\n3.39\t-0.24586050428463702\n3.4\t-0.2555411020268312\n"}]},"apps":[],"jobName":"paragraph_1542145525377_1964801171","id":"20181113-224525_605047058","dateCreated":"2018-11-13T22:45:25+0100","dateStarted":"2018-11-13T23:17:12+0100","dateFinished":"2018-11-13T23:17:13+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15291"},{"text":"util.Properties.versionNumberString","user":"anonymous","dateUpdated":"2018-10-14T22:29:23+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res4: String = 2.11.8\n"}]},"apps":[],"jobName":"paragraph_1539547804126_668031116","id":"20180527-173602_2010279022","dateCreated":"2018-10-14T22:10:04+0200","dateStarted":"2018-10-14T22:29:23+0200","dateFinished":"2018-10-14T22:29:33+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15292"},{"text":"sc.version","user":"anonymous","dateUpdated":"2018-10-14T22:29:37+0200","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res6: String = 2.3.2\n"}]},"apps":[],"jobName":"paragraph_1539547804126_406781363","id":"20180715-155017_41059630","dateCreated":"2018-10-14T22:10:04+0200","dateStarted":"2018-10-14T22:29:37+0200","dateFinished":"2018-10-14T22:29:37+0200","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:15293"}],"name":"marklogicTest","id":"2DT8SPY3Y","noteParams":{},"noteForms":{},"angularObjects":{"md:shared_process":[],"angular:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}